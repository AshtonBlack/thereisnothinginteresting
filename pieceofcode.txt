public class Condition
    {
        //tires [0f, 1e, 2d, 3c, 4b, 5a, 6s]
        int[] slikTires { get; set; }
        int[] standartTires { get; set; }
        int[] dynamicTires { get; set; }
        int[] offroadTires { get; set; }
        int[] allseasonTires { get; set; }

        int[] lowestCars { get; set; }
        int[] highestCars { get; set; }

        public int MinRq()
        {
            return CalculateRq.MinRq(lowestCars);
        }

        public int MaxRq()
        {
            return CalculateRq.MinRq(highestCars);
        }

        public int DynamicMinRq()
        {
            return CalculateRq.MinRq(dynamicTires);
        }

        public int StandartMinRq()
        {
            return CalculateRq.MinRq(standartTires);
        }

        public int SlikMinRq()
        {
            return CalculateRq.MinRq(slikTires);
        }

        public int OffroadMinRq()
        {
            return CalculateRq.MinRq(offroadTires);
        }

        public int AllseasonMinRq()
        {
            return CalculateRq.MinRq(allseasonTires);
        }        
    }

    public class CalculateRq
    {
        public static int MinRq(int[] a)
        {
            int minrq = 0;
            int carNumber = 0;
            for (int i = 0; i < 7; i++)
            {
                carNumber += a[i];
                int overCars = 0;
                if (carNumber > 5) overCars = 5 - carNumber;
                minrq += (a[i] - overCars) * 6 + (a[i] - overCars) * i * 4;
                if (carNumber > 4) break;
            }

            return minrq;
        }

        public static int LimRq(int[] a)
        {
            int rq = 0;
            for (int i = 0; i < 5; i++)
            {
                rq += a[i];
            }

            return rq;
        }
    }
